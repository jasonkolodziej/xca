# # This is a basic workflow to help you get started with Actions

# name: CI

# # Controls when the action will run. 
# on:
#   # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
name: Autonomous
on: workflow_dispatch
  # schedule:
  #  - cron:  '0 10 * * *'
jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.SCOPED_TOKEN }}
      - name: Fetch release version
        run: |
          curl -sL https://api.github.com/repos/chris2511/xca/releases/latest > xca-release.json
      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name 'Jason Kolodziej'
          git config --global user.email 'jason.a.kolodziej@users.noreply.github.com'
          git commit -am "New release version"
          git push
      - name: Grab JSON response
        id: setJsonVar
        # if: steps.git-check.outputs.modified == 'true'
        run: |
          content=`cat ./xca-release.json`
          # content=`curl -sL https://api.github.com/repos/chris2511/xca/releases/latest`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=jsonApiResponse::${content}"
      - name: Find & Set URL var
        id: setURLvar
        run: |
          echo ::set-output name=URL::${{fromJson(steps.setJsonVar.outputs.jsonApiResponse).assets[1].browser_download_url}}
      - run: |
          echo ${{steps.setURLvar.outputs.URL}}
          sed -i '18s/.*/$url='\''ughugh'\''/' ./tools/chocolateyinstall.ps1
          git config --global user.name 'Jason Kolodziej'
          git config --global user.email 'jason.a.kolodziej@users.noreply.github.com'
          git commit -am "Updated choco package to meet version"
          git push
          # echo "${{fromJson(steps.setJsonVar.outputs.jsonApiResponse).assets[1].browser_download_url}}"
