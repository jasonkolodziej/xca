# # This is a basic workflow to help you get started with Actions

# name: CI

# # Controls when the action will run. 
# on:
#   # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
name: Autonomous
on:   workflow_dispatch
# schedule:
 # - cron:  '0 10 * * *'
jobs:
  check-xca-release:
    runs-on: ubuntu-latest
    outputs:
      newpkg: ${{ steps.git-check.outputs.modified }} # map step output to job output
      url: ${{ steps.setURLvar.outputs.URL }}
      version: ${{ steps.setURLvar.outputs.TAG }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.SCOPED_TOKEN }}
      - name: Fetch release version
        id: fetchReleases
        run: |
          latestContent=`curl -sL https://api.github.com/repos/chris2511/xca/releases/latest`
          currentContent=`cat ./xca-release.json`
          # curl -sL https://api.github.com/repos/chris2511/xca/releases/latest > xca-release.json
          currentContent="${currentContent//'%'/'%25'}"
          currentContent="${currentContent//$'\n'/'%0A'}"
          currentContent="${currentContent//$'\r'/'%0D'}"
          latestContent="${latestContent//'%'/'%25'}"
          latestContent="${latestContent//$'\n'/'%0A'}"
          latestContent="${latestContent//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=prevResponse::${currentContent}"
          echo "::set-output name=currentResponse::${latestContent}"
      - name: Parse URL vars
        id: parseURLs
        run: |
          CTAG=${{fromJson(steps.fetchReleases.outputs.currentContent).tag_name}}
          CTAG="${CTAG//RELEASE.}"
          LTAG=${{fromJson(steps.fetchReleases.outputs.latestContent).tag_name}}
          LTAG="${LTAG//RELEASE.}"
          echo $LTAG $CTAG
          echo ::set-output name=modified::$([ $LTAG == $CTAG ] && echo "false" || echo "true")
          echo "::set-output name=TAG::${LTAG}"
          echo ::set-output name=URL::${{fromJson(steps.fetchReleases.outputs.latestContent).assets[1].browser_download_url}}
#       - name: Check for modified url
#         id: git-check
#         run: | # echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          curl -sL https://api.github.com/repos/chris2511/xca/releases/latest > xca-release.json
          git config --global user.name 'Jason Kolodziej'
          git config --global user.email 'jason.a.kolodziej@users.noreply.github.com'
          git commit -am "Store new release version metadata"
          git push
#       - name: Grab JSON response
#         id: setJsonVar
#         if: steps.git-check.outputs.modified == 'true'
#         run: |
#           content=`cat ./xca-release.json`
#           # content=`curl -sL https://api.github.com/repos/chris2511/xca/releases/latest`
#           # the following lines are only required for multi line json
#           content="${content//'%'/'%25'}"
#           content="${content//$'\n'/'%0A'}"
#           content="${content//$'\r'/'%0D'}"
#           # end of optional handling for multi line json
#           echo "::set-output name=jsonApiResponse::${content}"
#       - name: Find & Set URL var
#         id: setURLvar
#         if: steps.git-check.outputs.modified == 'true'
#         run: |
#           TAG=${{fromJson(steps.setJsonVar.outputs.jsonApiResponse).tag_name}}
#           TAG="${TAG//RELEASE.}"
#           echo "::set-output name=TAG::${TAG}"
#           echo ::set-output name=URL::${{fromJson(steps.setJsonVar.outputs.jsonApiResponse).assets[1].browser_download_url}}
#       - name: Write line
#         if: steps.git-check.outputs.modified == 'true'
#         run: |
#           FIX=${{steps.setURLvar.outputs.URL}}
#           url='$url'
#           echo $url $FIX
#           sed -i "18s|.*|$url='$FIX'|g" ./tools/chocolateyinstall.ps1
#           git config --global user.name 'Jason Kolodziej'
#           git config --global user.email 'jason.a.kolodziej@users.noreply.github.com'
#           git commit -am "Updated choco package to meet version"
#           git push
#           # echo "${{fromJson(steps.setJsonVar.outputs.jsonApiResponse).assets[1].browser_download_url}}
  recreate-choco:
    runs-on: windows-latest
    needs: check-xca-release
    if: ${{ needs.check-xca-release.outputs.newpkg }} == 'true'
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
         fetch-depth: 0
      -
        name: Choco new
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: new xca -a --version ${{needs.check-xca-release.outputs.version}} silentargs="'/qb'" url="'${{needs.check-xca-release.outputs.url}}'" installertype="'msi'"
      - 
        name: Move files to parent
        run: |
          cd xca; Rename-Item ReadMe.md -NewName choco_readme.md
          $f = '.\tools\chocolateyuninstall.ps1'; gc $f | ? {$_ -notmatch "^\s*#"} | % {$_ -replace '(^.*?)\s*?[^``]#.*','$1'} | Out-File $f+".~" -en utf8; mv -fo $f+".~" $f
          $f = '.\tools\chocolateyinstall.ps1'; gc $f | ? {$_ -notmatch "^\s*#"} | % {$_ -replace '(^.*?)\s*?[^``]#.*','$1'} | Out-File $f+".~" -en utf8; mv -fo $f+".~" $f
          Get-ChildItem -Path . | Copy-Item -Destination .. -Recurse -Container -Force; cd ..; rm -r xca
          git commit -am "Updated choco package to meet version"
          git push
      - 
        name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ needs.check-xca-release.outputs.version  }}
          release_name: Release ${{ needs.check-xca-release.outputs.version }}
          draft: false
          prerelease: false
